<?php

    require_once './kibu/core/SystemManagement/SystemManagement.php';

    class ModuleManagement extends SystemManagement {

        protected $_moduleDir = './kibu/modules/';
        protected $_moduleNum;
        protected $_installedModules;
        protected $_registeredModules;
        protected $_unregisteredModules;
        protected $_unregisteredModuleInfo;
        protected $_disabledModules;
        protected $_enabledModules;


        public function __construct() {
            parent::__construct();
            $this->setInstalled();
            $this->setRegistered();
            $this->setUnregistered();
//
//			Utility::pre($this->_installedModules);
//			echo "<br /><br />";
//			Utility::pre($this->_registeredModules);
//			echo "<br /><br />";
//			Utility::pre($this->_unregisteredModules);
        }

        private function setInstalled() {
            $openDir = opendir($this->_moduleDir); // open the module directory
            while (($file = readdir($openDir)) !== false) { // iterate through all files/folders found in directory
                if(substr($file, 0, 1) != ".") { // exlude files/folders that begin with '.'
                    $this->_installedModules[] = $file; // save results to array, stored in local property '_installedModules'
                }
            }
            closedir($openDir); // close directory being read
        }

        private function setRegistered() {
            $query = "SELECT * FROM siteModules ORDER BY moduleName"; // set query
            $query = $this->_db->setQuery($query); // run query through $db object
            while($assoc = $this->_db->getAssoc()) { // iterate through associative array generated by query
                $this->_registeredModules[$assoc['moduleName']] = $assoc; // build multi-dimensional array of returned results, store it in local property '_registeredModules'
            }
        }

        private function setUnregistered() {
            if(is_array($this->_registeredModules)) {
                foreach($this->_registeredModules as $key => $value) { // iterate through array in '_registeredModules'
                    $registeredModules[] = $value['moduleLink']; // create temporary array that matches pattern of '_installedModules'
                }
                $this->_unregisteredModules = array_diff($this->_installedModules, $registeredModules); // remove all installed AND registered modules to form an array of '_unregisteredModules'
            }
        }

        private function setEnabledDisabled() {
            if(is_array($this->_registeredModules)) {
                foreach($this->_registeredModules as $key => $value) { // iterate through array in _registeredModules
                    if($value['moduleEnabled'] == 'y') { // if enabled
                        $this->_enabledModules[$key] = $value; // add to array stored as '_enabledModules'
                    }
                    if($value['moduleEnabled'] == 'n') { // if disabled
                        $this->_disabledModules[$key] = $value; // add to array stored as '_disabledModules'
                    }
                }
            }
        }

        public function findModuleNum($moduleLink) {
            $query = "SELECT moduleNum FROM siteModules WHERE moduleLink = '".$moduleLink."'"; // set query to retreive moduleNum
            $this->_db->setQuery($query);
            $assoc = $this->_db->getAssoc();
            $this->_moduleNum = $assoc['moduleNum'];
        }

        public function getModuleNum() {
            return $this->_moduleNum; // return '_moduleNum' from local property to calling script
        }


        private function manageModules() {
            if(isset($_POST['enabledisable'])) {
                $this->enableDisable();
            }
            elseif(isset($_POST[''])) {
            }
            else {
                $this->registerModule();
            }
        }


        private function enableDisable() {

        }

        private function setUnregisteredInfo(){
            $moduleInfo = array();
            foreach($this->_unregisteredModules as $key => $value) {
                $configPath = $this->_moduleDir.$value.'/config.php';
                if(file_exists($configPath)) {
                    include $configPath;
                    $moduleInfo[] = $moduleConfig;
                }
                $this->generateModuleNum();
            }
            $this->_unregisteredModuleInfo = $moduleInfo;
        }

        private function registerModuleFields() {
            ob_start();
            foreach($this->_unregisteredModuleInfo as $key => $value) {
                $checkbox = new Template('./kibu/core/templates/');
                $vars = array("type" => "checkbox", "value" => $value['moduleName'], "name" => "registerModules['$value[moduleLink]']", "id" => "registerModules['$value[moduleLink]']");
                $checkbox->set_vars($vars, yes);
                $field = $checkbox->fetch('form_input.tpl.php');

                $label = new Template('./kibu/core/templates/');
                $label->set_vars($vars, yes);
                $label->set('field', $field);
                $label->set('label', $value['moduleName']);
                echo $label->fetch('form_label_back.tpl.php');
            }
            $fields = ob_get_contents();
            ob_end_clean();
            $fieldset = new Template('./kibu/core/templates/');
            $fieldsetVars = array("legend" => "Unregistered Modules", "fields" => $fields);
            $fieldset->set_vars($fieldsetVars, yes);
            $fieldset = $fieldset->fetch('form_fieldset.tpl.php');
            //$tpl->set('body', $fieldset);
        }

        private function registerModule() {
            $this->setUnregisteredInfo();
            $this->registerModuleFields();
        }
    }





    class ModuleManagement_InstallModule extends ModuleManagement {

        protected $_moduleLink;
        protected $_moduleNum;
        protected $_moduleID;
        protected $_definition;
        protected $_installedTemplates;
        protected $_config;

        public function __construct() {
            parent::__construct();			
            $this->_permAbility = "Install Modules";

            //$this->_moduleLink = "Contact_Us";
            //$this->_moduleLink = "Contact_Us_Advanced";
            //$this->_moduleLink = "Local_Nav";

            $this->_definition = simplexml_load_file("./kibu/modules/".$this->_moduleLink."/definition.xml");

            $this->_moduleNum = Utility::generateRandStr(5);

            if($this->_definition->config) {
                $this->_handleConfig();
            }			
            if($this->_definition->templates && !$this->_error) {
                $this->_handleTemplates();
            }
            if($this->_definition->contentAssetTypes && !$this->_error) {
                $this->_handleContentAssetTypes();
            }
            if($this->_definition->parameters && !$this->_error) {
                $this->_handleParameters();
            }
            if($this->_definition->dbTables && !$this->_error) {
                $this->_handleDBTables();
            }			
        }


        private function _handleConfig() {
            echo "<h3>Configuration</h3>";
            $this->_config = (array)$this->_definition->config;
            $this->_config['moduleNum'] = $this->_moduleNum;				

            $table = "siteModules";
            $data = $this->_config;

            $this->_db->insert($table, $data);

            $this->_error = $this->_db->error;

            if(!$this->_error) {
                echo "Module Configuration Successful.<br />";
            }

            $query = "SELECT moduleID FROM siteModules WHERE moduleNum = '".$this->_moduleNum."'";
            $this->_db->setQuery($query);
            $result = $this->_db->getAssoc();
            $this->_moduleID = $result['moduleID'];
        }


        private function _handleTemplates() {
            echo "<br /><h3>Templates</h3>";			
            foreach($this->_definition->templates->template as $template) {
                $template = (array)$template;
                $templateTypeName = $template['templateType'];
                unset($template['@attributes']);
                unset($template['templateType']);

                $query = "INSERT INTO siteTemplates SET ";
                foreach($template as $field => $value) {
                    $query .= " ".$field." = '".$value."', ";
                }
                $query .= "templateTypeID = (SELECT templateTypeID FROM siteTemplateTypes WHERE templateTypeName = '".$templateTypeName."')";

                $this->_db->setQuery($query);

                $this->_error = $this->_db->error;

                if(!$this->_error) {	
                    echo "Template '".$template['templateName']."' installed successfully.<br />";
                    $query2 = "SELECT templateLink, templateID FROM siteTemplates WHERE templateLink = '".$template['templateLink']."' AND templateName = '".$template['templateName']."'";
                    $this->_db->setQuery($query2);
                    $result = $this->_db->getAssoc();
                    $this->_installedTemplates[$result['templateLink']] = $result['templateID'];
                }
            }
        }

        private function _handleContentAssetTypes() {
            echo "<br /><h3>Content Asset Types</h3>";			
            foreach($this->_definition->contentAssetTypes->contentAssetType as $contentAssetType) {			
                $contentAssetType = (array)$contentAssetType;
                $contentAssetType['assetModuleID'] = $this->_moduleID;
                foreach($this->_installedTemplates as $templateLink => $templateID) {
                    if($contentAssetType['assetDisplayTemplate'] == $templateLink) {
                        $contentAssetType['assetDisplayID'] = $templateID;
                    }
                    if($contentAssetType['assetEditTemplate'] == $templateLink) {
                        $contentAssetType['assetEditID'] = $templateID;
                    }
                }
                unset($contentAssetType['assetDisplayTemplate']);
                unset($contentAssetType['assetEditTemplate']);

                $table = "contentAssetTypes";

                $this->_db->insert($table, $contentAssetType);

                $this->_error = $this->_db->error;

                if(!$this->_error) {
                    echo "Content Asset Type '".$contentAssetType['assetTypeName']."' installed successfully.<br />";
                }
            }
        }

        private function _handleParameters() {
            echo "<br /><h3>Parameters</h3>";
            foreach($this->_definition->parameters->parameter as $parameter) {
                $parameters = $this->_attributesToArray($parameter->attributes());

                $table = "siteModulesParams";
                $data['siteModuleID'] = $this->_moduleID;
                $data['siteModulesParamName'] = $parameters['name'];
                $data['siteModulesParamDefaultValue'] = $parameters['defaultValue'];					

                $this->_db->insert($table, $data);

                $this->_error = $this->_db->error;

                if(!$this->_error) { echo "Parameter ".$parameters['name']." installed successfully.<br />"; }
            }
        }

        private function _handleDBTables() {
            echo "<br /><h3>Database Tables</h3>";			
            $tablePrefix = "_MOD_".$this->_moduleNum."_";

            foreach($this->_definition->dbTables->dbTable as $table) {
                $tableName = $tablePrefix.(string)$table->dbTableName;
                $primaryKey = (string)$table->dbTablePrimaryKey;

                $string = "CREATE TABLE `".$tableName."` (";

                foreach($table->dbTableColumn as $column) {		
                    $attributes = $this->_attributesToArray($column->attributes());
                    $columnName = $attributes['name'];
                    unset($attributes['name']);

                    $string .= "`".$columnName."`";

                    foreach($attributes as $att => $val) {
                            $string .= " ".$val;
                    }
                    $string .= ", ";
                }

                $string .= "PRIMARY KEY (`".$primaryKey."`),";

                foreach($table->dbTableKey as $key => $value) {
                    $string .= "KEY `".$value."` (`".$value."`),";
                }

                $string = substr($string, 0, -1);

                $string .= ")";

                $this->_db->setQuery($string);

                $this->_error = $this->_db->error;

                if(!$this->_error) {
                    echo "Database table '".$tableName."' successfully created.<br />";
                }
            }
        }

        private function _attributesToArray(SimpleXMLElement $attributes) {
            $attributes = (array)$attributes;
            return $attributes['@attributes'];
        }

    }




    class ManageModule_ModuleManagement extends ModuleManagement_InstallModule {

        public function __construct() {
            parent::__construct();
            $this->_permAbility = "Manage Module";
        }
    }




    class UninstallModule_ModuleManagement extends ModuleManagement {

            public function __construct() {
                    parent::__construct();
                    $this->_permAbility = "Uninstall Modules";
            }

    }